// use serde::{Serialize, Deserialize};
use url::{Url};
use crate::errors;

use errors::Result;

#[derive(serde::Serialize)]
pub struct Config {
    inputs : Vec<InputConfig>,
    output : OutputConfig,
}

impl Config {
    pub fn new(inputs: Vec<InputConfig>, output: OutputConfig) -> Self { Self { inputs, output } }
}
#[derive(serde::Serialize)]
pub struct InputConfig {
    url : Url,

}

impl InputConfig {
    pub fn new(url: Url) -> Self { Self { url } }

    pub fn from_urls(urls : Vec<Url>) -> Result<Vec<InputConfig>> {
        Ok (
            urls
            .into_iter()
            .map(|url_ok| InputConfig::new(url_ok))
            .collect()
           )
    }

    pub fn from_strs(urls : Vec<&str>) -> Result<Vec<InputConfig>> {
        Ok( 
            urls
            .into_iter()
            .map(|url_str| Url::parse(url_str).unwrap())
            .map(|url_ok| InputConfig::new(url_ok))
            .collect()
          )
    }
}

#[derive(serde::Serialize)]
pub struct OutputConfig {
    url : Url,
}

impl OutputConfig {
    pub fn new(url: Url) -> Self { Self { url } }

    pub fn from_url(url : Url) -> Option<OutputConfig> {
        Some(OutputConfig::new(url))
    }

    pub fn from_str(str_url : &str) -> Option<OutputConfig> {
        if let url = Url::parse(str_url) {
            Some(OutputConfig::new(url))
        } else {
            None
        }
    }
}

